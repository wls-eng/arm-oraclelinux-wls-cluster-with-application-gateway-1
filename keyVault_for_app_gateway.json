{
	"$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"_artifactsLocation": {
			"type": "string",
			"metadata": {
				"description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
			},
			"defaultValue": "https://raw.githubusercontent.com/gnsuryan/arm-oraclelinux-wls-cluster-with-application-gateway/master/"
		},
		"adminUsername": {
			"type": "string",
			"metadata": {
				"description": "User name for the Virtual Machine."
			}
		},
		"authenticationType": {
			"type": "string",
			"defaultValue": "password",
			"allowedValues": [
				"sshPublicKey",
				"password"
			],
			"metadata": {
				"description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
			}
		},
		"adminPasswordOrKey": {
			"type": "securestring",
			"metadata": {
				"description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
			}
		},
		"acceptOTNLicenseAgreement": {
			"type": "string",
			"metadata": {
				"description": "Do you agree to provide OTN credentials to accept OTN License Agreement? Enter Y or y to agree, else N or n"
			}
		},
		"otnAccountUsername": {
			"type": "string",
			"metadata": {
				"description": "Username for your Oracle Technology Network account"
			}
		},
		"otnAccountPassword": {
			"type": "securestring",
			"metadata": {
				"description": "Password for your Oracle Technology Network account"
			}
		},
		"wlsDomainName": {
			"type": "string",
			"metadata": {
				"description": "Provide Weblogic domain name"
			}
		},
		"wlsUserName": {
			"type": "string",
			"metadata": {
				"description": "Username for your Weblogic domain name"
			}
		},
		"wlsPassword": {
			"type": "securestring",
			"metadata": {
				"description": "Password for your Weblogic domain name"
			}
		},
		"managedServerPrefix": {
			"type": "string",
			"metadata": {
				"description": "Provide managed server prefix names"
			}
		},
		"dnsLabelPrefix": {
			"type": "string",
			"metadata": {
				"description": "Unique DNS Name for the Public IP used to access the Virtual Machine."
			}
		},
		"dnsNameforApplicationGateway": {
			"type": "string",
			"defaultValue": "wlsclusterappgw",
			"metadata": {
				"description": "DNS for ApplicationGateway"
			}
		},
		"GatewayPublicIPAddressName": {
			"type": "string",
			"defaultValue": "gatewayPublicIP",
			"metadata": {
				"description": "Public IP Name for the Application Gateway"
			}
		},
		"linuxOSVersion": {
			"type": "string",
			"defaultValue": "7.3",
			"allowedValues": [
				"7.6",
				"7.5",
				"7.4",
				"7.3"
			],
			"metadata": {
				"description": "The Oracle Linux version for the VM. This will pick a fully patched image of this given Oracle Linux version."
			}
		},
		"numberOfInstances": {
			"type": "int",
			"defaultValue": 2,
			"minValue": 2,
			"maxValue": 5,
			"metadata": {
				"description": "Number of VMs to deploy, limit 5 since this sample is using a single storage account"
			}
		},
		"location": {
			"type": "string",
			"defaultValue": "[resourceGroup().location]",
			"metadata": {
				"description": "Location for all resources."
			}
		},
		"vmSizeSelect": {
			"type": "string",
			"defaultValue": "Standard_A3",
			"allowedValues": [
				"Standard_A1",
				"Standard_A2",
				"Standard_A3",
				"Standard_A4"
			],
			"metadata": {
				"description": "Select appropriate VM Size as per requirement (Standard_A1, Standard_A2, Standard_A3, Standard_A4)"
			}
		},
		"KeyVaultName": {
			"type": "string",
			"defaultValue": "myKeyVault4Cert",
			"metadata": {
				"description": "KeyVault Name"
			}
		},
		"KeyVaultResourceGroup": {
			"type": "string",
			"defaultValue": "[resourceGroup().name]",
			"metadata": {
				"description": "Key Vault Resouce Group Name"
			}
		},
		"appGatewaySSLCertificateData": {
                    "reference": {
                        "keyVault": {
                           "id": "[concat('/subscriptions/',subscription().id,'/resourceGroups/',parameters('KeyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/',parameters('KeyVaultName'))]"
                        },
                        "secretName": "myCertSecretData"
                    }
                  },
                  "appGatewaySSLCertificatePassword": {
                    "reference": {
                        "keyVault": {                           
                        "id": "[concat('/subscriptions/',subscription().id,'/resourceGroups/',parameters('KeyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/',parameters('KeyVaultName'))]"
                        },
                        "secretName": "myCertSecretPassword"
                    }
                  }
	},
	"variables": {
		"extensionUrl": "[concat(parameters('_artifactsLocation'), 'scripts/')]",
		"imagePublisher": "Oracle",
		"imageOffer": "Oracle-Linux",
		"managedServerVMName": "managedServerVM",
		"adminVMName": "adminServerVM",
		"nicName": "_NIC",
		"storageAccountName": "[concat('storage',uniquestring(resourceGroup().id))]",
		"addressPrefix": "10.0.0.0/16",
		"subnetName": "Subnet",
		"subnetPrefix": "10.0.0.0/24",
		"storageAccountType": "Standard_LRS",
		"publicIPAddressName": "_PublicIP",
		"publicIPAddressType": "Dynamic",
		"vmSize": "[parameters('vmSizeSelect')]",
		"virtualNetworkName": "[concat(parameters('wlsDomainName'),'_VNET')]",
		"ScriptFolder": "scripts",
		"ScriptFileName": "setupClusterDomain.sh",
		"availabilitySetName": "WLSCluster-AvailabilitySet",
		"adminAvailabilitySetName": "WLSAdmin-AvailabilitySet",
		"appGatewayName": "myAppGateway",
		"appGatewaySubnetName": "appGatewaySubnet",
		"appGatewaySubnetPrefix": "10.0.1.0/24",
		"appGatewaySubnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('appGatewaySubnetName'))]",
		"appGatewayPublicIPRef": "[resourceId('Microsoft.Network/publicIPAddresses',parameters('GatewayPublicIPAddressName'))]",
		"appGatewayFrontEndHTTPPort": 80,
		"appGatewayFrontEndHTTPSPort": 443,
		"backendPort": 8001,
		"availabilitySetId": {
			"id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
		},
		"linuxConfiguration": {
			"disablePasswordAuthentication": true,
			"ssh": {
				"publicKeys": [{
					"path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
					"keyData": "[parameters('adminPasswordOrKey')]"
				}]
			}
		},
		"subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]"
	},
	"resources": [{
			"type": "Microsoft.Storage/storageAccounts",
			"apiVersion": "2018-11-01",
			"name": "[variables('storageAccountName')]",
			"location": "[parameters('location')]",
			"sku": {
				"name": "[variables('storageAccountType')]"
			},
			"kind": "Storage",
			"properties": {

			}
		},
		{
			"apiVersion": "2018-04-01",
			"type": "Microsoft.Compute/availabilitySets",
			"location": "[parameters('location')]",
			"name": "[variables('availabilitySetName')]",
			"properties": {
				"platformFaultDomainCount": 2,
				"platformUpdateDomainCount": 2
			},
			"sku": {
				"name": "Aligned"
			}
		},
		{
			"type": "Microsoft.Network/publicIPAddresses",
			"apiVersion": "2018-11-01",
			"name": "[parameters('GatewayPublicIPAddressName')]",
			"sku": {
				"name": "Standard"
			},
			"location": "[resourceGroup().location]",
			"properties": {
				"publicIPAllocationMethod": "Static",
				"dnsSettings": {
					"domainNameLabel": "[concat(parameters('dnsNameforApplicationGateway'),'-',toLower(resourceGroup().name),'-',toLower(parameters('wlsDomainName')))]"
				}
			}
		},
		{
			"type": "Microsoft.Network/publicIPAddresses",
			"apiVersion": "2018-11-01",
			"name": "[concat(variables('adminVMName'),variables('publicIPAddressName'))]",
			"location": "[parameters('location')]",
			"properties": {
				"publicIPAllocationMethod": "[variables('publicIPAddressType')]",
				"dnsSettings": {
					"domainNameLabel": "[concat(toLower(parameters('dnsLabelPrefix')),'-',toLower(resourceGroup().name),'-',toLower(parameters('wlsDomainName')),'-',toLower(variables('adminVMName')))]"
				}
			}
		},
		{
			"type": "Microsoft.Network/virtualNetworks",
			"apiVersion": "2018-11-01",
			"name": "[variables('virtualNetworkName')]",
			"location": "[parameters('location')]",
			"properties": {
				"addressSpace": {
					"addressPrefixes": [
						"[variables('addressPrefix')]"
					]
				},
				"subnets": [{
						"name": "[variables('subnetName')]",
						"properties": {
							"addressPrefix": "[variables('subnetPrefix')]"
						}
					},
					{
						"name": "[variables('appGatewaySubnetName')]",
						"properties": {
							"addressPrefix": "[variables('appGatewaySubnetPrefix')]"
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Network/networkInterfaces",
			"apiVersion": "2018-11-01",
			"name": "[concat(variables('adminVMName'),variables('nicName'))]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[variables('virtualNetworkName')]"
			],
			"properties": {
				"ipConfigurations": [{
					"name": "ipconfig1",
					"properties": {
						"privateIPAllocationMethod": "Dynamic",
						"publicIPAddress": {
							"id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('adminVMName'),variables('publicIPAddressName')))]"
						},
						"subnet": {
							"id": "[variables('subnetRef')]"
						}
					}
				}]
			}
		},
		{
			"condition": "[not(equals(copyIndex(),0))]",
			"type": "Microsoft.Network/networkInterfaces",
			"apiVersion": "2018-11-01",
			"name": "[concat(variables('managedServerVMName'),copyIndex(),variables('nicName'))]",
			"location": "[parameters('location')]",
			"copy": {
				"name": "nicLoopForMS",
				"count": "[parameters('numberOfInstances')]"
			},
			"dependsOn": [
				"[variables('virtualNetworkName')]",
				"[parameters('GatewayPublicIPAddressName')]"
			],
			"properties": {
				"ipConfigurations": [{
					"name": "ipconfig2",
					"properties": {
						"privateIPAllocationMethod": "Dynamic",
						"subnet": {
							"id": "[variables('subnetRef')]"
						}
					}
				}]
			}
		},
		{
			"type": "Microsoft.Network/applicationGateways",
			"dependsOn": [
				"[variables('virtualNetworkName')]",
				"[concat('Microsoft.Compute/virtualMachines/',variables('adminVMName'))]",
				"virtualMachineLoopForMS"
			],
			"apiVersion": "2019-06-01",
			"name": "[variables('appGatewayName')]",
			"location": "southeastasia",
			"properties": {
				"sku": {
					"name": "Standard_v2",
					"tier": "Standard_v2"
				},
				"gatewayIPConfigurations": [{
					"name": "appGatewayIpConfig",
					"properties": {
						"subnet": {
							"id": "[variables('appGatewaySubnetRef')]"
						}
					},
					"type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
				}],
				"trustedRootCertificates": [],
				"frontendIPConfigurations": [{
					"name": "appGwPublicFrontendIp",
					"type": "Microsoft.Network/applicationGateways/frontendIPConfigurations",
					"properties": {
						"publicIPAddress": {
							"id": "[variables('appGatewayPublicIPRef')]"
						}
					}
				}],
				"frontendPorts": [{
						"name": "http_port",
						"properties": {
							"port": "[int(variables('appGatewayFrontEndHTTPPort'))]"
						},
						"type": "Microsoft.Network/applicationGateways/frontendPorts"
					},
					{
						"name": "https_port",
						"properties": {
							"port": "[int(variables('appGatewayFrontEndHTTPSPort'))]"
						},
						"type": "Microsoft.Network/applicationGateways/frontendPorts"
					}
				],
				"sslCertificates": [{
					"name": "appGwSslCertificate",
					"properties": {
						"data": "[parameters('appGatewaySSLCertificateData')]",
						"password": "[parameters('appGatewaySSLCertificatePassword')]"
					}
				}],
				"backendAddressPools": [{
					"name": "myGatewayBackendPool",
					"properties": {
						"copy": [{
							"name": "BackendAddresses",
							"count": "[sub(int(parameters('numberOfInstances')),1)]",
							"input": {
								"fqdn": "[concat(variables('managedServerVMName'), copyIndex('BackendAddresses',1))]"
							}
						}]
					},
					"type": "Microsoft.Network/applicationGateways/backendAddressPools"
				}],
				"backendHttpSettingsCollection": [{
					"name": "myHTTPSetting",
					"properties": {
						"provisioningState": "Succeeded",
						"port": "[int(variables('backendPort'))]",
						"protocol": "Http",
						"cookieBasedAffinity": "Enabled",
						"pickHostNameFromBackendAddress": true,
						"affinityCookieName": "ApplicationGatewayAffinity",
						"requestTimeout": 20,
						"probe": {
							"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/probes/HTTPhealthProbe')]"
						}
					},
					"type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
				}],
				"httpListeners": [{
						"name": "HTTPListener",
						"properties": {
							"frontendIPConfiguration": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/frontendIPConfigurations/appGwPublicFrontendIp')]"
							},
							"frontendPort": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/frontendPorts/http_port')]"
							},
							"protocol": "Http",
							"requireServerNameIndication": false
						},
						"type": "Microsoft.Network/applicationGateways/httpListeners"
					},
					{
						"name": "HTTPSListener",
						"properties": {
							"frontendIPConfiguration": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/frontendIPConfigurations/appGwPublicFrontendIp')]"
							},
							"frontendPort": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/frontendPorts/https_port')]"
							},
							"protocol": "Https",
							"requireServerNameIndication": false,
							"SslCertificate": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/sslCertificates/appGwSslCertificate')]"
							}
						},
						"type": "Microsoft.Network/applicationGateways/httpListeners"
					}

				],
				"urlPathMaps": [],
				"requestRoutingRules": [{
						"name": "HTTPRoutingRule",
						"properties": {
							"ruleType": "Basic",
							"httpListener": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/httpListeners/HTTPListener')]"
							},
							"backendAddressPool": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/backendAddressPools/myGatewayBackendPool')]"
							},
							"backendHttpSettings": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/backendHttpSettingsCollection/myHTTPSetting')]"
							}
						},
						"type": "Microsoft.Network/applicationGateways/requestRoutingRules"
					},
					{
						"name": "HTTPSRoutingRule",
						"properties": {
							"ruleType": "Basic",
							"httpListener": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/httpListeners/HTTPSListener')]"
							},
							"backendAddressPool": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/backendAddressPools/myGatewayBackendPool')]"
							},
							"backendHttpSettings": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/backendHttpSettingsCollection/myHTTPSetting')]"
							}
						},
						"type": "Microsoft.Network/applicationGateways/requestRoutingRules"
					}
				],
				"probes": [{
					"name": "HTTPhealthProbe",
					"properties": {
						"protocol": "Http",
						"path": "/weblogic/ready",
						"interval": 30,
						"timeout": 30,
						"unhealthyThreshold": 3,
						"pickHostNameFromBackendHttpSettings": true,
						"minServers": 0,
						"match": {
							"statusCodes": [
								"200-399"
							]
						}
					},
					"type": "Microsoft.Network/applicationGateways/probes"
				}],
				"rewriteRuleSets": [],
				"redirectConfigurations": [],
				"enableHttp2": false,
				"autoscaleConfiguration": {
					"minCapacity": 2,
					"maxCapacity": 3
				}
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines",
			"apiVersion": "2018-10-01",
			"name": "[variables('adminVMName')]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
				"[concat('Microsoft.Network/networkInterfaces/', variables('adminVMName'),variables('nicName'))]",
				"[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]"
			],
			"properties": {
				"availabilitySet": {
					"id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName'))]"
				},
				"hardwareProfile": {
					"vmSize": "[variables('vmSize')]"
				},
				"osProfile": {
					"computerName": "[variables('adminVMName')]",
					"adminUsername": "[parameters('adminUsername')]",
					"adminPassword": "[parameters('adminPasswordOrKey')]",
					"linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
				},
				"storageProfile": {
					"imageReference": {
						"publisher": "[variables('imagePublisher')]",
						"offer": "[variables('imageOffer')]",
						"sku": "[parameters('linuxOSVersion')]",
						"version": "latest"
					},
					"osDisk": {
						"createOption": "FromImage"
					},
					"dataDisks": [{
						"diskSizeGB": 900,
						"lun": 0,
						"createOption": "Empty"
					}]
				},
				"networkProfile": {
					"networkInterfaces": [{
						"id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('adminVMName'),variables('nicName')))]"
					}]
				},
				"diagnosticsProfile": {
					"bootDiagnostics": {
						"enabled": true,
						"storageUri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), '2016-01-01').primaryEndpoints.blob)]"
					}
				}
			}
		},
		{
			"condition": "[not(equals(copyIndex(),0))]",
			"type": "Microsoft.Compute/virtualMachines",
			"apiVersion": "2018-10-01",
			"name": "[concat(variables('managedServerVMName'), copyIndex())]",
			"location": "[parameters('location')]",
			"copy": {
				"name": "virtualMachineLoopForMS",
				"count": "[parameters('numberOfInstances')]"
			},
			"dependsOn": [
				"[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
				"nicLoopForMS",
				"[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]"
			],
			"properties": {
				"availabilitySet": {
					"id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName'))]"
				},
				"hardwareProfile": {
					"vmSize": "[variables('vmSize')]"
				},
				"osProfile": {
					"computerName": "[concat(variables('managedServerVMName'), copyIndex())]",
					"adminUsername": "[parameters('adminUsername')]",
					"adminPassword": "[parameters('adminPasswordOrKey')]",
					"linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
				},
				"storageProfile": {
					"imageReference": {
						"publisher": "[variables('imagePublisher')]",
						"offer": "[variables('imageOffer')]",
						"sku": "[parameters('linuxOSVersion')]",
						"version": "latest"
					},
					"osDisk": {
						"createOption": "FromImage"
					},
					"dataDisks": [{
						"diskSizeGB": 900,
						"lun": 0,
						"createOption": "Empty"
					}]
				},
				"networkProfile": {
					"networkInterfaces": [{
						"id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('managedServerVMName'),copyIndex(),variables('nicName')))]"
					}]
				},
				"diagnosticsProfile": {
					"bootDiagnostics": {
						"enabled": true,
						"storageUri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), '2016-01-01').primaryEndpoints.blob)]"
					}
				}
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('adminVMName'),'/newuserscript')]",
			"apiVersion": "2017-12-01",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[concat('Microsoft.Compute/virtualMachines/',variables('adminVMName'))]"
			],
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"https://raw.githubusercontent.com/gnsuryan/arm-oraclelinux-wls-cluster-with-application-gateway/master/setupClusterDomain.sh"
					],
					"commandToExecute": "[concat('sh setupClusterDomain.sh',' ',parameters('acceptOTNLicenseAgreement'),' ',parameters('otnAccountUsername'),' ',parameters('otnAccountPassword'),' ',parameters('wlsDomainName'),' ',parameters('wlsUserName'),' ',parameters('wlsPassword'),' ','admin',' ',variables('adminVMName'),' ',reference(parameters('GatewayPublicIPAddressName')).dnsSettings.fqdn)]"
				}
			}
		},
		{
			"condition": "[not(equals(copyIndex(),0))]",
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('managedServerVMName'),copyIndex(),'/newuserscript')]",
			"apiVersion": "2017-12-01",
			"location": "[parameters('location')]",
			"copy": {
				"name": "virtualMachineExtensionLoop",
				"count": "[parameters('numberOfInstances')]"
			},
			"dependsOn": [
				"virtualMachineLoopForMS"
			],
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"https://raw.githubusercontent.com/gnsuryan/arm-oraclelinux-wls-cluster-with-application-gateway/master/setupClusterDomain.sh"
					],
					"commandToExecute": "[concat('sh setupClusterDomain.sh',' ',parameters('acceptOTNLicenseAgreement'),' ',parameters('otnAccountUsername'),' ',parameters('otnAccountPassword'),' ',parameters('wlsDomainName'),' ',parameters('wlsUserName'),' ',parameters('wlsPassword'),' ',concat(parameters('managedServerPrefix'),copyIndex()),' ',variables('adminVMName'),' ',reference(parameters('GatewayPublicIPAddressName')).dnsSettings.fqdn)]"
				}
			}
		}
	],
	"outputs": {
		"wlsDomainLocation": {
			"type": "string",
			"value": "[concat('/u01/domains/', parameters('wlsDomainName'))]"
		},
		"adminHostName": {
			"type": "string",
			"value": "[reference(concat(variables('adminVMName'),variables('publicIPAddressName'))).dnsSettings.fqdn]"
		},
		"adminConsole": {
			"type": "string",
			"value": "[concat('http://',reference(concat(variables('adminVMName'),variables('publicIPAddressName'))).dnsSettings.fqdn,':7001/console')]"
		},
		"adminSecuredConsole": {
			"type": "string",
			"value": "[concat('https://',reference(concat(variables('adminVMName'),variables('publicIPAddressName'))).dnsSettings.fqdn,':7002/console')]"
		},
		"appGatewayURL": {
			"type": "string",
			"value": "[concat('http://',reference(parameters('GatewayPublicIPAddressName')).dnsSettings.fqdn)]"
		}
	}
}
